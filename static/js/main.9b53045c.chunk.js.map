{"version":3,"sources":["n1-main/m1-ui/u3-common/Super-Input/super-input.module.css","n1-main/m1-ui/u3-common/Super-Button/super-btn.module.css","n1-main/m1-ui/u3-common/Super-Select/super-select.module.css","n1-main/m2-bll/store/redux-store.ts","n2-features/f1-auth/a1-login/login-reducer.ts","n2-features/f1-auth/a2-register/register-reducer.ts","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a3-recovery/Recovery.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m1-ui/u3-common/Super-Input/SuperInputText.tsx","n1-main/m1-ui/u3-common/Super-CheckBox/SuperCheckBox.tsx","n1-main/m1-ui/u3-common/Super-Button/SuperButton.tsx","n1-main/m1-ui/u3-common/Super-Editable-Span/SuperEditableSpan.tsx","n1-main/m1-ui/u3-common/Super-Select/SuperSelect.tsx","n2-features/f0-test/Test.tsx","n2-features/f3-error/Error404.tsx","n1-main/m1-ui/u2-componemts/Profile/Profile.tsx","n1-main/m1-ui/u4-routes/Routes.tsx","n1-main/m1-ui/u2-componemts/Headet/Header.tsx","n1-main/m1-ui/u2-componemts/Main/Main.tsx","n1-main/m1-ui/u1-app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","rootReducer","combineReducers","login","state","action","type","register","store","createStore","applyMiddleware","thunk","Login","Register","Recovery","NewPassword","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperButton","red","finalClassName","default","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","SuperSelect","options","onChangeOption","mappedOptions","map","opt","index","ss","option","select","arr","Test","setValue","selections","undefined","Error404","Profile","Routes","path","render","Header","style","display","flexDirection","to","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b53045c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"super-input_superInput__22Tom\",\"errorInput\":\"super-input_errorInput__2a3am\",\"error\":\"super-input_error__2gHZz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"super-btn_default__12YgX\",\"red\":\"super-btn_red__-UYex\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"super-select_select__T8fHD\",\"option\":\"super-select_option__1Q5Hk\"};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"../../../n2-features/f1-auth/a1-login/login-reducer\";\r\nimport {registerReducer} from \"../../../n2-features/f1-auth/a2-register/register-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","export const loginReducer = (state: any, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}","export const registerReducer = (state: any, action: any) => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}","export const Login = ()=>{\r\n    return (\r\n        <div>\r\n            Hello, I'm a Login component\r\n        </div>\r\n    )\r\n}","export const Register = () => {\r\n    return (\r\n        <div>\r\n            Hello, I'm a Register component\r\n        </div>\r\n    )\r\n}","export const Recovery = () => {\r\n    return (\r\n        <>\r\n           Recovery Page\r\n        </>\r\n    )\r\n}","\r\nexport const NewPassword = () => {\r\n    return (\r\n        <>\r\n            New Password Page\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './super-input.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error? s.errorInput: s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './super-checkBox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked  && onChangeChecked(e.currentTarget.checked)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './super-btn.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\r\nimport SuperInputText from '../Super-Input/SuperInputText'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n// тип пропсов обычного спана\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n\r\n    spanProps?: DefaultSpanPropsType // пропсы для спана\r\n}\r\n\r\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\r\n    {\r\n        autoFocus, // игнорировать изменение этого пропса\r\n        onBlur,\r\n        onEnter,\r\n        spanProps,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\r\n\r\n    const onEnterCallback = () => {\r\n        setEditMode(false) // выключить editMode при нажатии Enter\r\n\r\n        onEnter && onEnter()\r\n    }\r\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setEditMode(false) // выключить editMode при нажатии за пределами инпута\r\n\r\n        onBlur && onBlur(e)\r\n    }\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        setEditMode(true) // включить editMode при двойном клике\r\n\r\n        onDoubleClick && onDoubleClick(e)\r\n    }\r\n\r\n    const spanClassName = `сделать красивый стиль для спана ${className}`\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? (\r\n                    <SuperInputText\r\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\r\n                        onBlur={onBlurCallback}\r\n                        onEnter={onEnterCallback}\r\n\r\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n                    />\r\n                ) : (\r\n                    <span\r\n                        onDoubleClick={onDoubleClickCallBack}\r\n                        className={spanClassName}\r\n\r\n                        {...restSpanProps}\r\n                    >\r\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\r\n                        {children || restProps.value}\r\n                    </span>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperEditableSpan\r\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\r\nimport ss from './super-select.module.css'\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const mappedOptions: any[] = [options?.map((opt, index)=>{\r\n        return <option className={ss.option} key={index}>{opt}</option>\r\n    })]; // map options with key\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        if (onChangeOption) {\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n        // onChange, onChangeOption\r\n    }\r\n\r\n    return (\r\n        <select className={ss.select} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SuperSelect\r\n","import SuperInputText from \"../../n1-main/m1-ui/u3-common/Super-Input/SuperInputText\";\r\nimport SuperCheckbox from \"../../n1-main/m1-ui/u3-common/Super-CheckBox/SuperCheckBox\";\r\nimport SuperButton from \"../../n1-main/m1-ui/u3-common/Super-Button/SuperButton\";\r\nimport SuperEditableSpan from \"../../n1-main/m1-ui/u3-common/Super-Editable-Span/SuperEditableSpan\";\r\nimport {useState} from \"react\";\r\nimport SuperSelect from \"../../n1-main/m1-ui/u3-common/Super-Select/SuperSelect\";\r\n\r\nconst arr = ['x', 'y', 'z']\r\n\r\n\r\nexport const Test = () => {\r\n    const [value, setValue] = useState<string>('')\r\n    const [selections, onChangeOption] = useState(arr[1])\r\n\r\n    return (\r\n        <>\r\n            <SuperInputText/>\r\n            <SuperCheckbox/>\r\n            <SuperButton>\r\n                Click here\r\n            </SuperButton>\r\n            <SuperEditableSpan\r\n                value={value}\r\n                onChangeText={setValue}\r\n                spanProps={{children: value ? undefined : 'enter text...'}}\r\n            />\r\n            <SuperSelect\r\n                options={arr}\r\n                value={selections}\r\n                onChangeOption={onChangeOption}\r\n            />\r\n        </>\r\n    )\r\n}","export const Error404 = () => {\r\n    return (\r\n        <>\r\nError\r\n        </>\r\n    )\r\n}","\r\nexport const Profile = () => {\r\n    return (\r\n        <>\r\n            Profile\r\n        </>\r\n    )\r\n}","import {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../../../n2-features/f1-auth/a1-login/Login\";\r\nimport {Register} from \"../../../n2-features/f1-auth/a2-register/Register\";\r\nimport {Recovery} from \"../../../n2-features/f1-auth/a3-recovery/Recovery\";\r\nimport {NewPassword} from \"../../../n2-features/f1-auth/a4-new-password/NewPassword\";\r\nimport {Test} from \"../../../n2-features/f0-test/Test\";\r\nimport {Error404} from \"../../../n2-features/f3-error/Error404\";\r\nimport {Profile} from \"../u2-componemts/Profile/Profile\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n                <Route path={'/register'} render={() => <Register/>}/>\r\n                <Route path={'/profile'} render={() => <Profile/>}/>\r\n                <Route path={'/recovery'} render={() => <Recovery/>}/>\r\n                <Route path={'/new-password'} render={() => <NewPassword/>}/>\r\n                <Route path={'/test'} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Header = ()=>{\r\n    return(\r\n        <div>\r\n            Hello, I'm a Header Component\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column'\r\n            }}>\r\n                <NavLink to={'/login'}>Login page</NavLink>\r\n                <NavLink to={'/register'}>Register page</NavLink>\r\n                <NavLink to={'/profile'}>Profile page</NavLink>\r\n                <NavLink to={'/recovery'}>Recovery page</NavLink>\r\n                <NavLink to={'/new-password'}>New Password page</NavLink>\r\n                <NavLink to={'/test'}>Test page</NavLink>\r\n                <NavLink to={'/404'}>Error page</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Routes} from \"../../u4-routes/Routes\";\r\nimport {Header} from \"../Headet/Header\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"../../m2-bll/store/redux-store\";\nimport {Main} from \"../u2-componemts/Main/Main\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Provider store={store}>\n                    <Main/>\n                </Provider>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/u1-app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}